{
    "model_role_name": "Intra-procedural Data Flow Analyzer",
    "user_role_name": "Intra-procedural Data Flow Analyzer",
    "system_role": "You are a Python programmer and very good at analyzing Python code. Particularly, you excel at understanding individual Python functions and their data flow relationships.",
    "task": "Given a specific source variable/parameter/expression (denoted as SRC) at a specific line (denoted as L1), analyze the execution flows of the given function and determine the variables to which SRC can propagate.",
    "analysis_rules": [
      "The key principle for answering this question is to extract all execution paths related to SRC and simulate the function's execution along each path to determine where SRC propagates. In Python, SRC can propagate to four possible locations:",
      "1. Function Calls: SRC propagates to a call site where it is passed as an argument to a callee function within the current function.",
      "2. Return Statements: SRC propagates to a return statement, returning a value to the caller of the current function.",
      "3. Function Parameters: SRC propagates to a parameter of the current function and can be referenced in the caller function, since objects are passed by reference in Python.",
      "4. Sink variables: SRC reaches one of the predefined sink variables provided in the input.",
      "If SRC is referenced by function parameters, it can propagate beyond the function scope after the function exits, due to object references being shared between caller and callee. For example, if function goo passes an object base to its callee function foo, and def foo(obj): obj = SRC, then the caller function goo can access the updated state of SRC through the object base.",
      "To conduct the analysis, follow these three steps:",
      "",
      "- Step 1: Identify SRC and its aliases within the current function. Extract key points, including:",
      "  1. Sink Statements: Where SRC is used or assigned to predefined sink variables.",
      "  2. Function Invocations: Call sites where SRC is passed as an argument.",
      "  3. Return Statements: Points where the function returns, possibly propagating SRC.",
      "  4. Parameter Assignments: Assignments where SRC is assigned to a parameter or an object field that is accessible outside the function.",
      "- Step 2: Identify all execution paths relevant to the key points found in Step 1. For each path:",
      "  - Identify every potential execution path;",
      "  - Verify whether the key points are executed along each path;",
      "  - Expand execution paths affected by conditional branches (if-elif-else), loops, and exception-handling blocks.",
      "- Step 3: For each execution path extracted in Step 2, simulate function execution line by line and determine where SRC propagates based on the four possible propagation locations.",
      "",
      "Additional guidelines:",
      "- Different propagation paths can exist due to control flow constructs (if-elif-else, loops); identify all execution paths before analysis;",
      "- Expand the first iteration of loops to analyze nested execution paths;",
      "- Treat each conditional branch (if, elif, else) as a separate execution path;",
      "- Expand nested conditions and loops to ensure all paths are analyzed."
    ],
    "analysis_examples": [
      "Example 1: Propagation via Sink, Function call, and Return",
      "User:",
      "Now I will give you a target function with the source point 'p' at line 2:",
      "```python",
      "def process(p):",
      "    a = p            # SRC: a",
      "    if a > 0:",
      "        b = a + 1",
      "        log_value(a)      # Sink value: a",
      "    else:",
      "        c = a - 1",
      "        update_value(a)   # Function call",
      "    return a              # Return statement: 'a' is returned",
      "```",
      "Where does the source variable 'p' at line 2 propagate within this function?",
      "System:",
      "Explanation:",
      "Step 1: Identify SRC and its alias;",
      "SRC: The variable p at line 2 is assigned to variable a;",
      "Step 2: Identify key points and execution paths:",
      "Path 1 (if branch): When a > 0, variable a is used in the sink statement at line 5 (log_value(a)) and returned at line 7;",
      "Path 2 (else branch): When a <= 0, variable a is passed as an argument to update_value at line 8 and then returned at line 7;",
      "Step 3: Simulate each execution path:",
      "In Path 1, propagation is from p -> a -> sink at log_value(a) and p -> a -> return a;",
      "In Path 2, propagation is from p -> a -> update_value(a) and p -> a -> return a;",
      "Answer:",
      "Path 1: Lines 2 -> 4 -> 5 -> 7;",
      "- Type: Sink; Name: a; Function: None; Index: None; Line: 5; Dependency: SRC (p) is assigned to 'a', then used in log_value;",
      "Path 2: Lines 2 -> 6 -> 8 -> 7;",
      "- Type: Argument; Name: a; Function: update_value; Index: 0; Line: 8; Dependency: SRC (p) is assigned to 'a', then passed as an argument to update_value;",
      "- Type: Return; Name: a; Function: None; Index: None; Line: 7; Dependency: SRC (p) is assigned to 'a', then returned.",
      "",
      "Example 2: Propagation via Parameter Passing and Return",
      "User:",
      "Now I will give you a target function with the source point 'src' at line 2:",
      "```python",
      "def modify_value(src, flag):",
      "    if flag > 0:",
      "        flag = src   # source value: src",
      "    elif flag == 0:",
      "        return src         # return statement",
      "    return -1              # Default return value ",
      "```",
      "Where does the source variable 'src' at line 2 propagate within this function?",
      "System:",
      "Explanation:",
      "Step 1: Identify SRC and its alias;",
      "SRC: The variable src is defined at line 2;",
      "Step 2: Identify key points and execution paths:",
      "Path 1 (flag > 0): src is assigned to a variable at line 3, making it accessible outside the function if the variable is mutable and passed by reference;",
      "Path 2 (flag == 0): src is returned at line 4, propagating to the caller;",
      "Path 3 (flag < 0): Function returns -1, so SRC does not propagate in this path;",
      "Step 3: Simulate the execution paths:",
      "Path 1: When flag > 0, src is assigned to flag, which is a local variable; unless flag is mutable and passed by reference, SRC does not propagate outside;",
      "Path 2: When flag == 0, src is returned to the caller;",
      "Path 3: When flag < 0, src does not propagate, as the function returns -1;",
      "Answer:",
      "Path 1: Lines 2 -> 4;",
      "- No propagation; Dependency: Assignment to flag does not propagate SRC outside the function in Python (unless flag is mutable and passed by reference).",
      "Path 2: Lines 2 -> 5;",
      "- Type: Return; Name: return src; Function: None; Index: 0; Line: 5; Dependency: SRC (src) is returned to the caller;"
    ],
    "question_template": "- Where does the source variable <SRC_NAME> at line <SRC_LINE> in this function propagate?",
    "answer_format_cot": [
      "(1) First, provide a detailed step-by-step reasoning process, following the explanation format used in the examples;",
      "(2) Once the reasoning is complete, begin the final answer section with 'Answer:';",
      "(3) For each execution path, list the propagation details using the following format:",
      "- Path <Path Number>: <Execution Path>;",
      "    - For a function argument propagation: 'Type: Argument; Name: {argument name}; Function: {callee function name}; Index: {argument index}; Line: {call site line number}; Dependency: {summary of dependency from SRC to argument}';",
      "    - For a return propagation: 'Type: Return; Name: {return name}; Function: None; Index: {return value index}; Line: {return statement line number}; Dependency: {summary of dependency from SRC to return value}';",
      "    - For parameter propagation: 'Type: Parameter; Name: {parameter name}; Function: None; Index: {parameter index}; Line: {assignment line number}; Dependency: {summary of dependency from SRC to parameter}';",
      "    - For sink propagation: 'Type: Sink; Name: {sink name}; Function: None; Index: None; Line: {sink statement line number}; Dependency: {summary of dependency from SRC to sink}';",
      "(4) If there is no propagation along a path, provide a brief explanation of why SRC does not propagate in that path as follows:",
      "- Path <Path Number>: <Execution Path>;",
      "    - No propagation; Dependency: {reason for no propagation};",
      "(5) Remember: All the indexes start from 0 instead of 1. If there is only one return value, the index is 0."
    ],
    "meta_prompts": [
      "Now I will give you a target function with the source point `<SRC_NAME>` at line <SRC_LINE>: \n```\n<FUNCTION>\n``` \n\n",
      "You may see the following statements as potential sink points. Identify which of these are related to SRC and its aliases;\n",
      "<SINK_VALUES>\n",
      "Here are the Function call sites and return statements within the function, which can be used in Step 1;\n",
      "<CALL_STATEMENTS>\n",
      "<RETURN_VALUES>\n",
      "Now, please answer the following question:\n<QUESTION>\n",
      "Your response should strictly follow the format:\n<ANSWER>\n"
    ]
  }
